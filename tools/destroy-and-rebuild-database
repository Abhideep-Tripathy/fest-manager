#! /usr/bin/env node

// Script to erase testing database and recreate it with dummy values.
// Usage: tools/destroy-and-rebuild-database <emails of superusers>
// Example: tools/destroy-and-rebuild-database aero31aero@gmail.com calvrix@github.com

// Configurable variables here.
var pathToCollections = '../routes/api/services';
var listToClean = ['users', 'bodies', 'events', 'teams', 'accomm', 'leaderboard'];

// Handle arguments here.
var superusers = process.argv.slice(2);

// Global dependencies
var mongoose = require('mongoose');

// Dummy data goes in the following functions.
var getUsers = function (superusers) {
	// Only make accounts for superusers.
	var data = [];
	superusers.forEach(function (elem) {
		data.push({
			email: elem,
			privilege: {
				level: 2,
			},
		});
	});
	return data;
};

var getBodies = function () {
	var data = [];
	data.push({
		name: 'Ruthless Romans',
		admin: 'julius@rome.com',
		code: 'rome',
		_id: toId('5956c34c7cf3a802602b7b18'),
	});
	data.push({
		name: 'Mighty Mongols',
		admin: 'ckhan@mongol.com',
		code: 'mongol',
		_id: toId('5956c34c7cf3a802602b7b19'),
	});
	data.push({
		name: 'Just Japanese',
		admin: 'samuraijack@japan.com',
		code: 'japan',
		_id: toId('5956c34c7cf3a802602b7b1a'),
	});
	data.push({
		name: 'Exemplary Egyptians',
		admin: 'tut@egypt.com',
		code: 'egypt',
		_id: toId('5956c34c7cf3a802602b7b1b'),
	});
	data.push({
		name: 'Marvelous Mughals',
		admin: 'akbar@india.com',
		code: 'india',
		_id: toId('5956c34c7cf3a802602b7b1c'),
	});
	return data;
};

var getEvents = function (models) {
	// var bodies = models.find(function(elem){
	// 	return elem.name == 'bodies';
	// });
	var bodies = {
		name: "bodies",
		model: require(pathToCollections + "/bodies").model
	};
	var data = [];

	var lastbody;
	getBodies().forEach(function (elem) {
		var prefixes = ['Workshop', 'Conference', 'Talk', 'Competition'];
		prefixes.forEach(function (pre, index) {
			lastbody = elem._id;
			var newevent = {
				name: pre + " by " + elem.name,
				tagline: pre + " event by " + elem.name,
				body: elem._id,
				category: "Random",
				type: pre,
				route: elem.code + ++index, // jshint ignore:line
				price: 200 * (index - 1),
			};
			if (newevent.route.startsWith('rome')) {
				newevent.immersive = "https://crux-bphc.github.io/pybits-static/";
			}
			data.push(newevent);
		});
	});

	data.push({
		name: "PyBits",
		tagline: "Remove this before final release",
		body: lastbody,
		category: "Conference",
		type: "Conference",
		route: "@pybits",
	});

	data.push({
		name: "Google Developer Group",
		tagline: "Remove this before final release",
		body: lastbody,
		category: "Workshop",
		type: "Workshop",
		route: "@gdg",
	});

	return data;
};

var getScores = function () {
	data = [{
			"_id": "5a49ff33c2d45e765fc357e8",
			"name": "Birla Institute of Technology & Science - Goa",
			"updatedAt": "2018-01-01T09:28:19.353Z",
			"__v": 0,
			"createdAt": "2018-01-01T09:28:19.353Z",
			"others": [],
			"bronze": [],
			"silver": [
				"Cricket"
			],
			"gold": []
		},
		{
			"_id": "5a49ff58c2d45e765fc35837",
			"name": "Harvard University",
			"updatedAt": "2018-01-01T09:28:56.824Z",
			"__v": 0,
			"createdAt": "2018-01-01T09:28:56.824Z",
			"others": [],
			"bronze": [
				"Cricket"
			],
			"silver": [],
			"gold": [
				"Tennis",
				"Wolf"
			]
		},
		{
			"_id": "5a49ff17c2d45e765fc357b3",
			"name": "Birla Institute of Technology & Science - Hyderabad",
			"updatedAt": "2018-01-01T09:27:51.016Z",
			"__v": 0,
			"createdAt": "2018-01-01T09:27:51.016Z",
			"others": [
				"Football"
			],
			"bronze": [
				"Wolf"
			],
			"silver": [
				"Tennis",
				"Generic/None",
				"Eat, Sleep, Repeat"
			],
			"gold": [
				"Cricket",
				"Contact"
			]
		},
		{
			"_id": "5a588fd9c2d45e765fd2c9d8",
			"name": "Universitas Islam Indonesia",
			"updatedAt": "2018-01-12T10:37:13.074Z",
			"__v": 0,
			"createdAt": "2018-01-12T10:37:13.074Z",
			"others": [],
			"bronze": [
				"Football"
			],
			"silver": [],
			"gold": []
		},
		{
			"_id": "5a588fefc2d45e765fd2ca0a",
			"name": "Indian Institute of Information Technology - Design and Manufacturing - Jabalpur",
			"updatedAt": "2018-01-12T10:37:35.920Z",
			"__v": 0,
			"createdAt": "2018-01-12T10:37:35.920Z",
			"others": [],
			"bronze": [
				"Tennis"
			],
			"silver": [],
			"gold": []
		},
		{
			"_id": "5a58900bc2d45e765fd2ca47",
			"name": "The Chinese University of Hong Kong",
			"updatedAt": "2018-01-12T10:38:03.117Z",
			"__v": 0,
			"createdAt": "2018-01-12T10:38:03.117Z",
			"others": [],
			"bronze": [],
			"silver": [],
			"gold": [
				"Generic/None"
			]
		},
		{
			"_id": "5a58904dc2d45e765fd2cac3",
			"name": "Yeditepe University",
			"updatedAt": "2018-01-12T10:39:09.749Z",
			"__v": 0,
			"createdAt": "2018-01-12T10:39:09.749Z",
			"others": [],
			"bronze": [],
			"silver": [],
			"gold": [
				"Baseball"
			]
		},
		{
			"_id": "5a589062c2d45e765fd2cb06",
			"name": "Dartmouth College",
			"updatedAt": "2018-01-12T10:39:30.589Z",
			"__v": 0,
			"createdAt": "2018-01-12T10:39:30.589Z",
			"others": [],
			"bronze": [],
			"silver": [
				"Baseball"
			],
			"gold": []
		},
		{
			"_id": "5a589098c2d45e765fd2cb89",
			"name": "Brandeis University",
			"updatedAt": "2018-01-12T10:40:24.546Z",
			"__v": 0,
			"createdAt": "2018-01-12T10:40:24.546Z",
			"others": [
				"Carrom"
			],
			"bronze": [],
			"silver": [],
			"gold": []
		},
		{
			"_id": "5a5890adc2d45e765fd2cbe2",
			"name": "Grand Canyon University",
			"updatedAt": "2018-01-12T10:40:45.510Z",
			"__v": 0,
			"createdAt": "2018-01-12T10:40:45.510Z",
			"others": [
				"Battlecode"
			],
			"bronze": [],
			"silver": [],
			"gold": []
		},
		{
			"_id": "5a5890bfc2d45e765fd2cc15",
			"name": "Massachusetts Institute of Technology",
			"updatedAt": "2018-01-12T10:41:03.712Z",
			"__v": 0,
			"createdAt": "2018-01-12T10:41:03.712Z",
			"others": [],
			"bronze": [],
			"silver": [],
			"gold": [
				"Battlecode"
			]
		},
		{
			"_id": "5a66df3f5a4025f180025676",
			"name": "Birla Institute of Technology and Science, Dubai",
			"updatedAt": "2018-01-23T07:07:43.447Z",
			"__v": 0,
			"createdAt": "2018-01-23T07:07:43.447Z",
			"others": [],
			"bronze": [],
			"silver": [],
			"gold": [
				"Oil spilling"
			]
		}
	];
	return data;
};

// Internal functions here. Do not change unless you know what you're doing.

var toId = function (str) {
	return mongoose.Types.ObjectId(str);
};

var importModels = function (pathToCollections, listToClean) {
	var models = [];
	listToClean.forEach(function (elem) {
		models.push({
			name: elem,
			model: require(pathToCollections + "/" + elem).model
		});
	});
	return models;
};

var cleanModels = function (models) {
	var promises = [];
	models.forEach(function (elem) {
		promises.push(elem.model.remove({}));
	});
	return Promise.all(promises);
};

var populateModels = function (models) {
	var promises = [];
	models.forEach(function (elem) {
		if (elem.name == 'users') {
			return promises.push(elem.model.insertMany(getUsers(superusers)));
		}
		if (elem.name == 'bodies') {
			return promises.push(elem.model.insertMany(getBodies()));
		}
		if (elem.name == 'events') {
			return promises.push(elem.model.insertMany(getEvents(models)));
		}
		if (elem.name == 'leaderboard') {
			return promises.push(elem.model.insertMany(getScores()));
		}
	});
	return Promise.all(promises);
};


var main = function () {
	if (process.env.NODE_ENV == 'production') {
		console.log("Cannot delete database in production. Exiting.");
		process.exit(2);
	}
	var connection = require('../utils/mongoose');
	connection();

	var models = importModels(pathToCollections, listToClean);
	cleanModels(models).then(function () {
		console.log('Cleaned Database.');
		populateModels(models).then(function () {
			console.log("Entered Values");
			process.exit(0);
		});
	}).catch(function (err) {
		console.log(err);
		console.log("Error while execution. Exiting.");
		process.exit(1);
	});
};

// Start execution
main();
